from flask import Flask, request, jsonify
from flask_cors import CORS
import json
import logging

app = Flask(__name__)
CORS(app)  # Enable CORS from the Add-in

# Configure logging
logging.basicConfig(level=logging.INFO)

@app.route('/composeEmail', methods=['POST'])
def composeEmail():
    """Mock endpoint for email composition"""
    try:
        if not request.headers.get('Content-Type') == 'application/json':
            return jsonify({'error': 'Content-Type must be application/json'}), 400
        
        body = request.get_json()
        user_prompt = body.get('prompt', '')
        
        app.logger.info(f'Received compose request with prompt: {user_prompt}')
        
        # Mock response - in a real implementation, this would call your LLM
        mock_response = {
            'subject': f'Re: {user_prompt[:50]}...' if len(user_prompt) > 50 else f'Re: {user_prompt}',
            'body': f'''Hello,

Thank you for your message about "{user_prompt}".

This is a mock response from the OutlookLLM backend. In a full implementation, this would be generated by your language model based on the prompt:

"{user_prompt}"

Best regards,
AI Assistant
'''
        }
        
        app.logger.info(f'Sending mock response: {mock_response}')
        return json.dumps(mock_response)
        
    except Exception as e:
        app.logger.error(f'Error in composeEmail: {str(e)}')
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/summarizeEmail', methods=['POST'])
def summarizeEmail():
    """Mock endpoint for email summarization"""
    try:
        if not request.headers.get('Content-Type') == 'application/json':
            return jsonify({'error': 'Content-Type must be application/json'}), 400
        
        body = request.get_json()
        email_content = body.get('content', '')
        
        app.logger.info(f'Received summarize request for email: {email_content[:100]}...')
        
        # Mock response - in a real implementation, this would call your LLM
        mock_summary = f'''**Email Summary:**

This email appears to be about: {email_content[:100]}...

**Key Points:**
- This is a mock summary generated by the OutlookLLM backend
- In a full implementation, an AI model would analyze the content
- The original email was {len(email_content)} characters long

**Action Items:**
- Review the mock implementation
- Configure a real language model for production use
'''
        
        response = {'summary': mock_summary}
        app.logger.info(f'Sending mock summary: {response}')
        return json.dumps(response)
        
    except Exception as e:
        app.logger.error(f'Error in summarizeEmail: {str(e)}')
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/health', methods=['GET'])
def health():
    """Health check endpoint"""
    return jsonify({'status': 'healthy', 'message': 'OutlookLLM Mock Backend is running'})

if __name__ == '__main__':
    # Simple HTTP server for development
    app.run(host='127.0.0.1', port=8385, debug=True)
