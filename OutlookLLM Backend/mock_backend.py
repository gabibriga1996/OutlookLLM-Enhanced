import json
from flask import Flask, request, jsonify
from flask_cors import CORS
import logging

# Import RAG system
try:
    from outlook_rag import OutlookRAGSystem
    from sample_data_generator import generate_sample_emails, generate_sample_calendar_events
    RAG_AVAILABLE = True
except ImportError as e:
    print(f"RAG system not available: {e}")
    RAG_AVAILABLE = False

app = Flask(__name__)
CORS(app)  # Enable CORS from the Add-in

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize RAG system if available
rag_system = None
if RAG_AVAILABLE:
    try:
        rag_system = OutlookRAGSystem()
        
        # Load sample data if no real data is available
        if rag_system.get_stats()["total_emails"] == 0:
            logging.info("Loading sample data for RAG system...")
            sample_emails = generate_sample_emails()
            sample_events = generate_sample_calendar_events()
            
            for email in sample_emails:
                rag_system.add_email(email)
            
            for event in sample_events:
                rag_system.add_calendar_event(event)
            
            rag_system.save_embeddings_cache()
            logging.info(f"Loaded {len(sample_emails)} emails and {len(sample_events)} events")
    except Exception as e:
        logging.error(f"Failed to initialize RAG system: {e}")
        rag_system = None

def mock_completions(prompt, temperature=1.0, stop_strings=[], system_prompt=None):
    """Mock completion function that returns a simple response"""
    app.logger.info('Mock completion with prompt=%s', prompt)
    
    # Simple mock response
    mock_response = {
        "choices": [{
            "text": f"<Subject>Mock Subject: {prompt[:30]}...</Subject><Body>This is a mock email body generated for: {prompt}. This would normally be generated by the LLM model.</Body>"
        }]
    }
    
    # Return a mock Flask response
    class MockResponse:
        def get_json(self):
            return mock_response
    
    return MockResponse()

@app.route('/composeEmail', methods=['POST'])
def composeEmail():
    assert request.headers.get('Content-Type') == 'application/json'
    body = request.get_json()
    
    user_prompt = ""
    if "prompt" in body:
        user_prompt = body["prompt"]

    system_prompt = """\
    You are a helpful, respectful and honest email writing assistant. \
    Always answer as helpfully as possible and follow ALL given instructions. \
    Do not speculate or make up information. \
    Do not reference any given instructions or context. \
    Do not be too verbose. \
    Write your responses in two sections. 
    <Subject> You write here the email subject.
    <Body> You write here the email body.
    """

    # Use mock completion
    llm_response = mock_completions(prompt=user_prompt, system_prompt=system_prompt)
    llm_response_json = llm_response.get_json()
    llm_text = llm_response_json["choices"][0]["text"]

    # Extract the subject and body
    subject_start = llm_text.find("<Subject>")
    body_start = llm_text.find("<Body>", subject_start)
    body_end = len(llm_text)  # Mock doesn't have </s>

    if subject_start != -1 and body_start != -1:
        subject = llm_text[subject_start + 9:body_start]
        body = llm_text[body_start + 6:body_end]
    else:
        subject = f"Mock Subject for: {user_prompt[:20]}..."
        body = f"Mock email body generated for: {user_prompt}"

    subject = subject.strip()
    body = body.strip()

    app.logger.info('Mock response - Subject: %s, Body: %s', subject, body)

    response = {'subject': subject, 'body': body}
    return json.dumps(response)

@app.route('/health', methods=['GET'])
def health():
    rag_stats = rag_system.get_stats() if rag_system else {"status": "RAG not available"}
    return jsonify({
        "status": "healthy", 
        "message": "Mock backend is running",
        "rag_system": rag_stats
    })

@app.route('/query/inbox', methods=['POST'])
def query_inbox():
    """Query inbox using RAG"""
    assert request.headers.get('Content-Type') == 'application/json'
    body = request.get_json()
    
    question = body.get("question", "")
    if not question:
        return jsonify({"error": "Question is required"}), 400
    
    if not rag_system:
        return jsonify({
            "question": question,
            "answer": "RAG system is not available. This is a mock response for inbox queries.",
            "relevant_emails": [],
            "context_used": False
        })
    
    try:
        rag_result = rag_system.query_inbox(question)
        
        # Generate mock response using the context
        mock_answer = f"Based on your inbox, I found {len(rag_result['relevant_emails'])} relevant emails. "
        if rag_result['relevant_emails']:
            email = rag_result['relevant_emails'][0]
            mock_answer += f"The most relevant email is from {email['sender']} with subject '{email['subject']}' dated {email['date'][:10]}."
        else:
            mock_answer += "No relevant emails found for your query."
        
        response = {
            "question": question,
            "answer": mock_answer,
            "relevant_emails": rag_result["relevant_emails"],
            "context_used": True
        }
        
        app.logger.info(f'Inbox query: {question}')
        return jsonify(response)
        
    except Exception as e:
        app.logger.error(f'Error in inbox query: {str(e)}')
        return jsonify({"error": "Internal server error"}), 500

@app.route('/query/calendar', methods=['POST'])
def query_calendar():
    """Query calendar using RAG"""
    assert request.headers.get('Content-Type') == 'application/json'
    body = request.get_json()
    
    question = body.get("question", "")
    if not question:
        return jsonify({"error": "Question is required"}), 400
    
    if not rag_system:
        return jsonify({
            "question": question,
            "answer": "RAG system is not available. This is a mock response for calendar queries.",
            "relevant_events": [],
            "context_used": False
        })
    
    try:
        rag_result = rag_system.query_calendar(question)
        
        # Generate mock response using the context
        mock_answer = f"Based on your calendar, I found {len(rag_result['relevant_events'])} relevant events. "
        if rag_result['relevant_events']:
            event = rag_result['relevant_events'][0]
            mock_answer += f"The most relevant event is '{event['subject']}' organized by {event['organizer']} starting at {event['start_time'][:16]}."
        else:
            mock_answer += "No relevant calendar events found for your query."
        
        response = {
            "question": question,
            "answer": mock_answer,
            "relevant_events": rag_result["relevant_events"],
            "context_used": True
        }
        
        app.logger.info(f'Calendar query: {question}')
        return jsonify(response)
        
    except Exception as e:
        app.logger.error(f'Error in calendar query: {str(e)}')
        return jsonify({"error": "Internal server error"}), 500

if __name__ == '__main__':
    # Run without SSL for now
    app.run(host="127.0.0.1", port=8385, debug=True, use_reloader=False, threaded=True)
